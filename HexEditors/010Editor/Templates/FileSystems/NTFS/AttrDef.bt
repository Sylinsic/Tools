//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

LittleEndian();

typedef enum <DWORD> {
    Indexed = 0x02,
    Resident = 0x40,
    NonResident = 0x80
} FLAGS;

typedef enum <DWORD> {
    Binary = 0x00,
    Filename = 0x01,
    UnicodeString = 0x02,
    UnsignedLong = 0x10,
    SID = 0x11,
    SecurityHash = 0x12,
    MultipleUnsignedLongs = 0x13
} COLLATION_RULE;

typedef enum <DWORD> {
    StandardInformation = 0x10,
    AttributeList = 0x20,
    FileName = 0x30,
    ObjectId = 0x40,
    SecurityDescriptor = 0x50,
    VolumeName = 0x60,
    VolumeInformation = 0x70,
    Data = 0x80,
    IndexRoot = 0x90,
    IndexAllocation = 0xA0,
    Bitmap = 0xB0,
    ReparsePoint = 0xC0,
    EAInformation = 0xD0,
    EA = 0xE0,
    PropertySet = 0xF0,
    LoggedUtilityStream = 0x100
} TYPE;

typedef struct {
    wchar_t Label [64];
    TYPE Type;
    DWORD DisplayRule;
    COLLATION_RULE CollationRule;
    FLAGS Flags;
    QWORD MinSize;
    QWORD MaxSize;
} AttrDef <read=readAttrDef>;

wchar_t [64] readAttrDef (AttrDef &a) {
    return a.Label;
}

while (!FEof()) {
    AttrDef attr;
}